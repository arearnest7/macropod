# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import macropod_pb2 as macropod__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in macropod_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MacroPodFunctionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Invoke = channel.unary_unary(
                '/macropod.MacroPodFunction/Invoke',
                request_serializer=macropod__pb2.MacroPodRequest.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)


class MacroPodFunctionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Invoke(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MacroPodFunctionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Invoke': grpc.unary_unary_rpc_method_handler(
                    servicer.Invoke,
                    request_deserializer=macropod__pb2.MacroPodRequest.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'macropod.MacroPodFunction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('macropod.MacroPodFunction', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MacroPodFunction(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Invoke(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodFunction/Invoke',
            macropod__pb2.MacroPodRequest.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MacroPodEvalStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Eval = channel.unary_unary(
                '/macropod.MacroPodEval/Eval',
                request_serializer=macropod__pb2.EvalStruct.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)
        self.EvalMetrics = channel.unary_unary(
                '/macropod.MacroPodEval/EvalMetrics',
                request_serializer=macropod__pb2.MacroPodRequest.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)
        self.EvalLatency = channel.unary_unary(
                '/macropod.MacroPodEval/EvalLatency',
                request_serializer=macropod__pb2.MacroPodRequest.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)
        self.EvalSummary = channel.unary_unary(
                '/macropod.MacroPodEval/EvalSummary',
                request_serializer=macropod__pb2.MacroPodRequest.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)


class MacroPodEvalServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Eval(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EvalMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EvalLatency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EvalSummary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MacroPodEvalServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Eval': grpc.unary_unary_rpc_method_handler(
                    servicer.Eval,
                    request_deserializer=macropod__pb2.EvalStruct.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
            'EvalMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.EvalMetrics,
                    request_deserializer=macropod__pb2.MacroPodRequest.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
            'EvalLatency': grpc.unary_unary_rpc_method_handler(
                    servicer.EvalLatency,
                    request_deserializer=macropod__pb2.MacroPodRequest.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
            'EvalSummary': grpc.unary_unary_rpc_method_handler(
                    servicer.EvalSummary,
                    request_deserializer=macropod__pb2.MacroPodRequest.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'macropod.MacroPodEval', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('macropod.MacroPodEval', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MacroPodEval(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Eval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodEval/Eval',
            macropod__pb2.EvalStruct.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EvalMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodEval/EvalMetrics',
            macropod__pb2.MacroPodRequest.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EvalLatency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodEval/EvalLatency',
            macropod__pb2.MacroPodRequest.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EvalSummary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodEval/EvalSummary',
            macropod__pb2.MacroPodRequest.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MacroPodIngressStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Config = channel.unary_unary(
                '/macropod.MacroPodIngress/Config',
                request_serializer=macropod__pb2.ConfigStruct.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)
        self.WorkflowInvoke = channel.unary_unary(
                '/macropod.MacroPodIngress/WorkflowInvoke',
                request_serializer=macropod__pb2.MacroPodRequest.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)
        self.FunctionInvoke = channel.unary_unary(
                '/macropod.MacroPodIngress/FunctionInvoke',
                request_serializer=macropod__pb2.MacroPodRequest.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)
        self.CreateWorkflow = channel.unary_unary(
                '/macropod.MacroPodIngress/CreateWorkflow',
                request_serializer=macropod__pb2.WorkflowStruct.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)
        self.UpdateWorkflow = channel.unary_unary(
                '/macropod.MacroPodIngress/UpdateWorkflow',
                request_serializer=macropod__pb2.WorkflowStruct.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)
        self.DeleteWorkflow = channel.unary_unary(
                '/macropod.MacroPodIngress/DeleteWorkflow',
                request_serializer=macropod__pb2.MacroPodRequest.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)


class MacroPodIngressServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Config(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WorkflowInvoke(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FunctionInvoke(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MacroPodIngressServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Config': grpc.unary_unary_rpc_method_handler(
                    servicer.Config,
                    request_deserializer=macropod__pb2.ConfigStruct.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
            'WorkflowInvoke': grpc.unary_unary_rpc_method_handler(
                    servicer.WorkflowInvoke,
                    request_deserializer=macropod__pb2.MacroPodRequest.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
            'FunctionInvoke': grpc.unary_unary_rpc_method_handler(
                    servicer.FunctionInvoke,
                    request_deserializer=macropod__pb2.MacroPodRequest.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
            'CreateWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWorkflow,
                    request_deserializer=macropod__pb2.WorkflowStruct.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
            'UpdateWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateWorkflow,
                    request_deserializer=macropod__pb2.WorkflowStruct.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
            'DeleteWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteWorkflow,
                    request_deserializer=macropod__pb2.MacroPodRequest.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'macropod.MacroPodIngress', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('macropod.MacroPodIngress', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MacroPodIngress(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Config(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodIngress/Config',
            macropod__pb2.ConfigStruct.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WorkflowInvoke(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodIngress/WorkflowInvoke',
            macropod__pb2.MacroPodRequest.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FunctionInvoke(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodIngress/FunctionInvoke',
            macropod__pb2.MacroPodRequest.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodIngress/CreateWorkflow',
            macropod__pb2.WorkflowStruct.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodIngress/UpdateWorkflow',
            macropod__pb2.WorkflowStruct.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodIngress/DeleteWorkflow',
            macropod__pb2.MacroPodRequest.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MacroPodDeployerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Config = channel.unary_unary(
                '/macropod.MacroPodDeployer/Config',
                request_serializer=macropod__pb2.ConfigStruct.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)
        self.CreateWorkflow = channel.unary_unary(
                '/macropod.MacroPodDeployer/CreateWorkflow',
                request_serializer=macropod__pb2.WorkflowStruct.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)
        self.UpdateWorkflow = channel.unary_unary(
                '/macropod.MacroPodDeployer/UpdateWorkflow',
                request_serializer=macropod__pb2.WorkflowStruct.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)
        self.DeleteWorkflow = channel.unary_unary(
                '/macropod.MacroPodDeployer/DeleteWorkflow',
                request_serializer=macropod__pb2.MacroPodRequest.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)
        self.UpdateDeployments = channel.unary_unary(
                '/macropod.MacroPodDeployer/UpdateDeployments',
                request_serializer=macropod__pb2.MacroPodRequest.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)
        self.CreateDeployment = channel.unary_unary(
                '/macropod.MacroPodDeployer/CreateDeployment',
                request_serializer=macropod__pb2.MacroPodRequest.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)
        self.TTLDelete = channel.unary_unary(
                '/macropod.MacroPodDeployer/TTLDelete',
                request_serializer=macropod__pb2.MacroPodRequest.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)


class MacroPodDeployerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Config(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDeployments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDeployment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TTLDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MacroPodDeployerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Config': grpc.unary_unary_rpc_method_handler(
                    servicer.Config,
                    request_deserializer=macropod__pb2.ConfigStruct.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
            'CreateWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWorkflow,
                    request_deserializer=macropod__pb2.WorkflowStruct.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
            'UpdateWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateWorkflow,
                    request_deserializer=macropod__pb2.WorkflowStruct.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
            'DeleteWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteWorkflow,
                    request_deserializer=macropod__pb2.MacroPodRequest.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
            'UpdateDeployments': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDeployments,
                    request_deserializer=macropod__pb2.MacroPodRequest.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
            'CreateDeployment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDeployment,
                    request_deserializer=macropod__pb2.MacroPodRequest.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
            'TTLDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.TTLDelete,
                    request_deserializer=macropod__pb2.MacroPodRequest.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'macropod.MacroPodDeployer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('macropod.MacroPodDeployer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MacroPodDeployer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Config(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodDeployer/Config',
            macropod__pb2.ConfigStruct.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodDeployer/CreateWorkflow',
            macropod__pb2.WorkflowStruct.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodDeployer/UpdateWorkflow',
            macropod__pb2.WorkflowStruct.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodDeployer/DeleteWorkflow',
            macropod__pb2.MacroPodRequest.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDeployments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodDeployer/UpdateDeployments',
            macropod__pb2.MacroPodRequest.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateDeployment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodDeployer/CreateDeployment',
            macropod__pb2.MacroPodRequest.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TTLDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodDeployer/TTLDelete',
            macropod__pb2.MacroPodRequest.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MacroPodLoggerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Timestamp = channel.unary_unary(
                '/macropod.MacroPodLogger/Timestamp',
                request_serializer=macropod__pb2.MacroPodRequest.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)
        self.Error = channel.unary_unary(
                '/macropod.MacroPodLogger/Error',
                request_serializer=macropod__pb2.MacroPodRequest.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)
        self.Print = channel.unary_unary(
                '/macropod.MacroPodLogger/Print',
                request_serializer=macropod__pb2.MacroPodRequest.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)
        self.GetTimestamp = channel.unary_unary(
                '/macropod.MacroPodLogger/GetTimestamp',
                request_serializer=macropod__pb2.MacroPodRequest.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)
        self.GetError = channel.unary_unary(
                '/macropod.MacroPodLogger/GetError',
                request_serializer=macropod__pb2.MacroPodRequest.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)
        self.GetPrint = channel.unary_unary(
                '/macropod.MacroPodLogger/GetPrint',
                request_serializer=macropod__pb2.MacroPodRequest.SerializeToString,
                response_deserializer=macropod__pb2.MacroPodReply.FromString,
                _registered_method=True)


class MacroPodLoggerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Timestamp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Error(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Print(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTimestamp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetError(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MacroPodLoggerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Timestamp': grpc.unary_unary_rpc_method_handler(
                    servicer.Timestamp,
                    request_deserializer=macropod__pb2.MacroPodRequest.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
            'Error': grpc.unary_unary_rpc_method_handler(
                    servicer.Error,
                    request_deserializer=macropod__pb2.MacroPodRequest.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
            'Print': grpc.unary_unary_rpc_method_handler(
                    servicer.Print,
                    request_deserializer=macropod__pb2.MacroPodRequest.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
            'GetTimestamp': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTimestamp,
                    request_deserializer=macropod__pb2.MacroPodRequest.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
            'GetError': grpc.unary_unary_rpc_method_handler(
                    servicer.GetError,
                    request_deserializer=macropod__pb2.MacroPodRequest.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
            'GetPrint': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrint,
                    request_deserializer=macropod__pb2.MacroPodRequest.FromString,
                    response_serializer=macropod__pb2.MacroPodReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'macropod.MacroPodLogger', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('macropod.MacroPodLogger', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MacroPodLogger(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Timestamp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodLogger/Timestamp',
            macropod__pb2.MacroPodRequest.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Error(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodLogger/Error',
            macropod__pb2.MacroPodRequest.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Print(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodLogger/Print',
            macropod__pb2.MacroPodRequest.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTimestamp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodLogger/GetTimestamp',
            macropod__pb2.MacroPodRequest.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetError(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodLogger/GetError',
            macropod__pb2.MacroPodRequest.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPrint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodLogger/GetPrint',
            macropod__pb2.MacroPodRequest.SerializeToString,
            macropod__pb2.MacroPodReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MacroPodMetricsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMetrics = channel.unary_unary(
                '/macropod.MacroPodMetrics/GetMetrics',
                request_serializer=macropod__pb2.MacroPodRequest.SerializeToString,
                response_deserializer=macropod__pb2.MetricsStruct.FromString,
                _registered_method=True)


class MacroPodMetricsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MacroPodMetricsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetrics,
                    request_deserializer=macropod__pb2.MacroPodRequest.FromString,
                    response_serializer=macropod__pb2.MetricsStruct.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'macropod.MacroPodMetrics', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('macropod.MacroPodMetrics', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MacroPodMetrics(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/macropod.MacroPodMetrics/GetMetrics',
            macropod__pb2.MacroPodRequest.SerializeToString,
            macropod__pb2.MetricsStruct.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
