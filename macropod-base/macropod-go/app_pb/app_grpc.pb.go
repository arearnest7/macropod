// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: app.proto

package app_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCFunctionClient is the client API for GRPCFunction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCFunctionClient interface {
	GRPCFunctionHandler(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseBody, error)
}

type gRPCFunctionClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCFunctionClient(cc grpc.ClientConnInterface) GRPCFunctionClient {
	return &gRPCFunctionClient{cc}
}

func (c *gRPCFunctionClient) GRPCFunctionHandler(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*ResponseBody, error) {
	out := new(ResponseBody)
	err := c.cc.Invoke(ctx, "/function.gRPCFunction/gRPCFunctionHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCFunctionServer is the server API for GRPCFunction service.
// All implementations must embed UnimplementedGRPCFunctionServer
// for forward compatibility
type GRPCFunctionServer interface {
	GRPCFunctionHandler(context.Context, *RequestBody) (*ResponseBody, error)
	mustEmbedUnimplementedGRPCFunctionServer()
}

// UnimplementedGRPCFunctionServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCFunctionServer struct {
}

func (UnimplementedGRPCFunctionServer) GRPCFunctionHandler(context.Context, *RequestBody) (*ResponseBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GRPCFunctionHandler not implemented")
}
func (UnimplementedGRPCFunctionServer) mustEmbedUnimplementedGRPCFunctionServer() {}

// UnsafeGRPCFunctionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCFunctionServer will
// result in compilation errors.
type UnsafeGRPCFunctionServer interface {
	mustEmbedUnimplementedGRPCFunctionServer()
}

func RegisterGRPCFunctionServer(s grpc.ServiceRegistrar, srv GRPCFunctionServer) {
	s.RegisterService(&GRPCFunction_ServiceDesc, srv)
}

func _GRPCFunction_GRPCFunctionHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCFunctionServer).GRPCFunctionHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/function.gRPCFunction/gRPCFunctionHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCFunctionServer).GRPCFunctionHandler(ctx, req.(*RequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCFunction_ServiceDesc is the grpc.ServiceDesc for GRPCFunction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCFunction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "function.gRPCFunction",
	HandlerType: (*GRPCFunctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "gRPCFunctionHandler",
			Handler:    _GRPCFunction_GRPCFunctionHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app.proto",
}
