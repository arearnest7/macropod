// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: prepuller.proto

package prepuller_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PrepullerService_Prepuller_FullMethodName = "/PrepullerService/Prepuller"
)

// PrepullerServiceClient is the client API for PrepullerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrepullerServiceClient interface {
	Prepuller(ctx context.Context, in *PrepullerServiceRequest, opts ...grpc.CallOption) (*PrepullerServiceReply, error)
}

type prepullerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrepullerServiceClient(cc grpc.ClientConnInterface) PrepullerServiceClient {
	return &prepullerServiceClient{cc}
}

func (c *prepullerServiceClient) Prepuller(ctx context.Context, in *PrepullerServiceRequest, opts ...grpc.CallOption) (*PrepullerServiceReply, error) {
	out := new(PrepullerServiceReply)
	err := c.cc.Invoke(ctx, PrepullerService_Prepuller_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrepullerServiceServer is the server API for PrepullerService service.
// All implementations must embed UnimplementedPrepullerServiceServer
// for forward compatibility
type PrepullerServiceServer interface {
	Prepuller(context.Context, *PrepullerServiceRequest) (*PrepullerServiceReply, error)
	mustEmbedUnimplementedPrepullerServiceServer()
}

// UnimplementedPrepullerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPrepullerServiceServer struct {
}

func (UnimplementedPrepullerServiceServer) Prepuller(context.Context, *PrepullerServiceRequest) (*PrepullerServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepuller not implemented")
}
func (UnimplementedPrepullerServiceServer) mustEmbedUnimplementedPrepullerServiceServer() {}

// UnsafePrepullerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrepullerServiceServer will
// result in compilation errors.
type UnsafePrepullerServiceServer interface {
	mustEmbedUnimplementedPrepullerServiceServer()
}

func RegisterPrepullerServiceServer(s grpc.ServiceRegistrar, srv PrepullerServiceServer) {
	s.RegisterService(&PrepullerService_ServiceDesc, srv)
}

func _PrepullerService_Prepuller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepullerServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrepullerServiceServer).Prepuller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrepullerService_Prepuller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrepullerServiceServer).Prepuller(ctx, req.(*PrepullerServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrepullerService_ServiceDesc is the grpc.ServiceDesc for PrepullerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrepullerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PrepullerService",
	HandlerType: (*PrepullerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepuller",
			Handler:    _PrepullerService_Prepuller_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prepuller.proto",
}
