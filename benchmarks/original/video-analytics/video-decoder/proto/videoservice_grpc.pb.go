// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoDecoderClient is the client API for VideoDecoder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoDecoderClient interface {
	Decode(ctx context.Context, in *DecodeRequest, opts ...grpc.CallOption) (*DecodeReply, error)
}

type videoDecoderClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoDecoderClient(cc grpc.ClientConnInterface) VideoDecoderClient {
	return &videoDecoderClient{cc}
}

func (c *videoDecoderClient) Decode(ctx context.Context, in *DecodeRequest, opts ...grpc.CallOption) (*DecodeReply, error) {
	out := new(DecodeReply)
	err := c.cc.Invoke(ctx, "/videoservice.VideoDecoder/Decode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoDecoderServer is the server API for VideoDecoder service.
// All implementations must embed UnimplementedVideoDecoderServer
// for forward compatibility
type VideoDecoderServer interface {
	Decode(context.Context, *DecodeRequest) (*DecodeReply, error)
	mustEmbedUnimplementedVideoDecoderServer()
}

// UnimplementedVideoDecoderServer must be embedded to have forward compatible implementations.
type UnimplementedVideoDecoderServer struct {
}

func (UnimplementedVideoDecoderServer) Decode(context.Context, *DecodeRequest) (*DecodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decode not implemented")
}
func (UnimplementedVideoDecoderServer) mustEmbedUnimplementedVideoDecoderServer() {}

// UnsafeVideoDecoderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoDecoderServer will
// result in compilation errors.
type UnsafeVideoDecoderServer interface {
	mustEmbedUnimplementedVideoDecoderServer()
}

func RegisterVideoDecoderServer(s grpc.ServiceRegistrar, srv VideoDecoderServer) {
	s.RegisterService(&VideoDecoder_ServiceDesc, srv)
}

func _VideoDecoder_Decode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoDecoderServer).Decode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoservice.VideoDecoder/Decode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoDecoderServer).Decode(ctx, req.(*DecodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoDecoder_ServiceDesc is the grpc.ServiceDesc for VideoDecoder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoDecoder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videoservice.VideoDecoder",
	HandlerType: (*VideoDecoderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Decode",
			Handler:    _VideoDecoder_Decode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/videoservice.proto",
}

// ObjectRecognitionClient is the client API for ObjectRecognition service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectRecognitionClient interface {
	Recognise(ctx context.Context, in *RecogniseRequest, opts ...grpc.CallOption) (*RecogniseReply, error)
}

type objectRecognitionClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectRecognitionClient(cc grpc.ClientConnInterface) ObjectRecognitionClient {
	return &objectRecognitionClient{cc}
}

func (c *objectRecognitionClient) Recognise(ctx context.Context, in *RecogniseRequest, opts ...grpc.CallOption) (*RecogniseReply, error) {
	out := new(RecogniseReply)
	err := c.cc.Invoke(ctx, "/videoservice.ObjectRecognition/Recognise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectRecognitionServer is the server API for ObjectRecognition service.
// All implementations must embed UnimplementedObjectRecognitionServer
// for forward compatibility
type ObjectRecognitionServer interface {
	Recognise(context.Context, *RecogniseRequest) (*RecogniseReply, error)
	mustEmbedUnimplementedObjectRecognitionServer()
}

// UnimplementedObjectRecognitionServer must be embedded to have forward compatible implementations.
type UnimplementedObjectRecognitionServer struct {
}

func (UnimplementedObjectRecognitionServer) Recognise(context.Context, *RecogniseRequest) (*RecogniseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recognise not implemented")
}
func (UnimplementedObjectRecognitionServer) mustEmbedUnimplementedObjectRecognitionServer() {}

// UnsafeObjectRecognitionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectRecognitionServer will
// result in compilation errors.
type UnsafeObjectRecognitionServer interface {
	mustEmbedUnimplementedObjectRecognitionServer()
}

func RegisterObjectRecognitionServer(s grpc.ServiceRegistrar, srv ObjectRecognitionServer) {
	s.RegisterService(&ObjectRecognition_ServiceDesc, srv)
}

func _ObjectRecognition_Recognise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecogniseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectRecognitionServer).Recognise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoservice.ObjectRecognition/Recognise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectRecognitionServer).Recognise(ctx, req.(*RecogniseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectRecognition_ServiceDesc is the grpc.ServiceDesc for ObjectRecognition service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectRecognition_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videoservice.ObjectRecognition",
	HandlerType: (*ObjectRecognitionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recognise",
			Handler:    _ObjectRecognition_Recognise_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/videoservice.proto",
}
