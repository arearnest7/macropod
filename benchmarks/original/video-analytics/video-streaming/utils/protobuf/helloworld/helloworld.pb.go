// MIT License
//
// Copyright (c) 2020 Dmitrii Ustiugov and EASE lab
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: helloworld.proto

package helloworld

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type HelloRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{0}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type HelloReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReply) Reset()         { *m = HelloReply{} }
func (m *HelloReply) String() string { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()    {}
func (*HelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{1}
}

func (m *HelloReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReply.Unmarshal(m, b)
}
func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReply.Marshal(b, m, deterministic)
}
func (m *HelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReply.Merge(m, src)
}
func (m *HelloReply) XXX_Size() int {
	return xxx_messageInfo_HelloReply.Size(m)
}
func (m *HelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReply proto.InternalMessageInfo

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type FwdHelloReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Image                string   `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Payload              string   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FwdHelloReq) Reset()         { *m = FwdHelloReq{} }
func (m *FwdHelloReq) String() string { return proto.CompactTextString(m) }
func (*FwdHelloReq) ProtoMessage()    {}
func (*FwdHelloReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{2}
}

func (m *FwdHelloReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FwdHelloReq.Unmarshal(m, b)
}
func (m *FwdHelloReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FwdHelloReq.Marshal(b, m, deterministic)
}
func (m *FwdHelloReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FwdHelloReq.Merge(m, src)
}
func (m *FwdHelloReq) XXX_Size() int {
	return xxx_messageInfo_FwdHelloReq.Size(m)
}
func (m *FwdHelloReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FwdHelloReq.DiscardUnknown(m)
}

var xxx_messageInfo_FwdHelloReq proto.InternalMessageInfo

func (m *FwdHelloReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FwdHelloReq) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *FwdHelloReq) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type FwdHelloResp struct {
	IsColdStart          bool     `protobuf:"varint,1,opt,name=isColdStart,proto3" json:"isColdStart,omitempty"`
	Payload              string   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FwdHelloResp) Reset()         { *m = FwdHelloResp{} }
func (m *FwdHelloResp) String() string { return proto.CompactTextString(m) }
func (*FwdHelloResp) ProtoMessage()    {}
func (*FwdHelloResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{3}
}

func (m *FwdHelloResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FwdHelloResp.Unmarshal(m, b)
}
func (m *FwdHelloResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FwdHelloResp.Marshal(b, m, deterministic)
}
func (m *FwdHelloResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FwdHelloResp.Merge(m, src)
}
func (m *FwdHelloResp) XXX_Size() int {
	return xxx_messageInfo_FwdHelloResp.Size(m)
}
func (m *FwdHelloResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FwdHelloResp.DiscardUnknown(m)
}

var xxx_messageInfo_FwdHelloResp proto.InternalMessageInfo

func (m *FwdHelloResp) GetIsColdStart() bool {
	if m != nil {
		return m.IsColdStart
	}
	return false
}

func (m *FwdHelloResp) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "helloworld.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "helloworld.HelloReply")
	proto.RegisterType((*FwdHelloReq)(nil), "helloworld.FwdHelloReq")
	proto.RegisterType((*FwdHelloResp)(nil), "helloworld.FwdHelloResp")
}

func init() { proto.RegisterFile("helloworld.proto", fileDescriptor_17b8c58d586b62f2) }

var fileDescriptor_17b8c58d586b62f2 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0xd7, 0x4e, 0x5d, 0x7d, 0x1b, 0x2a, 0x0f, 0xd1, 0x32, 0x2f, 0x23, 0x07, 0xf1, 0xd4,
	0xc3, 0x04, 0x8f, 0x0a, 0x13, 0xe6, 0x10, 0x07, 0xa3, 0x3b, 0xec, 0x1c, 0xcd, 0x63, 0x16, 0x52,
	0x13, 0x93, 0x4a, 0xed, 0x57, 0xf0, 0x63, 0xf8, 0x49, 0xa5, 0x59, 0xcb, 0x22, 0xec, 0xb6, 0xdb,
	0xfb, 0xff, 0xdf, 0x3f, 0x3f, 0x5e, 0x5e, 0x02, 0x67, 0xef, 0x24, 0xa5, 0x2a, 0x95, 0x91, 0x22,
	0xd1, 0x46, 0x15, 0x0a, 0x61, 0xeb, 0x30, 0x06, 0x83, 0x59, 0xad, 0x52, 0xfa, 0xfc, 0x22, 0x5b,
	0x20, 0xc2, 0xc1, 0x07, 0xcf, 0x29, 0x0e, 0x46, 0xc1, 0xcd, 0x71, 0xea, 0x6a, 0x76, 0x0d, 0xd0,
	0x64, 0xb4, 0xac, 0x30, 0x86, 0x5e, 0x4e, 0xd6, 0xf2, 0x75, 0x1b, 0x6a, 0x25, 0x9b, 0x43, 0x7f,
	0x5a, 0x8a, 0x16, 0x87, 0x27, 0x10, 0x66, 0xa2, 0xc9, 0x84, 0x99, 0xc0, 0x73, 0x38, 0xcc, 0xf2,
	0xfa, 0x58, 0xe8, 0xac, 0x8d, 0xa8, 0x71, 0x9a, 0x57, 0x52, 0x71, 0x11, 0x77, 0x37, 0xb8, 0x46,
	0xb2, 0x67, 0x18, 0x6c, 0x71, 0x56, 0xe3, 0x08, 0xfa, 0x99, 0x7d, 0x54, 0x52, 0x2c, 0x0b, 0x6e,
	0x0a, 0x07, 0x8e, 0x52, 0xdf, 0xf2, 0x59, 0xe1, 0x3f, 0xd6, 0xf8, 0x27, 0x80, 0xde, 0x93, 0x21,
	0x2a, 0xc8, 0xe0, 0x3d, 0x44, 0x4b, 0x5e, 0x39, 0x2e, 0xc6, 0x89, 0xb7, 0x1d, 0x7f, 0x11, 0xc3,
	0x8b, 0x1d, 0x1d, 0x2d, 0x2b, 0xd6, 0xc1, 0x07, 0x88, 0xda, 0xb9, 0xf0, 0xd2, 0x4f, 0x79, 0x97,
	0x1f, 0xc6, 0xbb, 0x1b, 0x56, 0xb3, 0xce, 0x78, 0x0e, 0x30, 0x2d, 0x45, 0x3b, 0xce, 0xbe, 0xb8,
	0xc9, 0x1d, 0x5c, 0x65, 0x2a, 0x59, 0x1b, 0xfd, 0x96, 0xd0, 0x37, 0xcf, 0xb5, 0x24, 0xeb, 0xa5,
	0x27, 0xa7, 0x2e, 0xbb, 0xaa, 0xeb, 0x45, 0xfd, 0xfc, 0x8b, 0xe0, 0x37, 0xec, 0xce, 0x5e, 0x56,
	0xaf, 0x47, 0xee, 0x37, 0xdc, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x69, 0xa1, 0x97, 0x36, 0x21,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	FwdHello(ctx context.Context, in *FwdHelloReq, opts ...grpc.CallOption) (*FwdHelloResp, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/helloworld.Greeter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) FwdHello(ctx context.Context, in *FwdHelloReq, opts ...grpc.CallOption) (*FwdHelloResp, error) {
	out := new(FwdHelloResp)
	err := c.cc.Invoke(ctx, "/helloworld.Greeter/FwdHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	FwdHello(context.Context, *FwdHelloReq) (*FwdHelloResp, error)
}

// UnimplementedGreeterServer can be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (*UnimplementedGreeterServer) SayHello(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedGreeterServer) FwdHello(ctx context.Context, req *FwdHelloReq) (*FwdHelloResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FwdHello not implemented")
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_FwdHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FwdHelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).FwdHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/FwdHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).FwdHello(ctx, req.(*FwdHelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
		{
			MethodName: "FwdHello",
			Handler:    _Greeter_FwdHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld.proto",
}

// FwdGreeterClient is the client API for FwdGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FwdGreeterClient interface {
	FwdHello(ctx context.Context, in *FwdHelloReq, opts ...grpc.CallOption) (*FwdHelloResp, error)
}

type fwdGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewFwdGreeterClient(cc grpc.ClientConnInterface) FwdGreeterClient {
	return &fwdGreeterClient{cc}
}

func (c *fwdGreeterClient) FwdHello(ctx context.Context, in *FwdHelloReq, opts ...grpc.CallOption) (*FwdHelloResp, error) {
	out := new(FwdHelloResp)
	err := c.cc.Invoke(ctx, "/helloworld.FwdGreeter/FwdHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FwdGreeterServer is the server API for FwdGreeter service.
type FwdGreeterServer interface {
	FwdHello(context.Context, *FwdHelloReq) (*FwdHelloResp, error)
}

// UnimplementedFwdGreeterServer can be embedded to have forward compatible implementations.
type UnimplementedFwdGreeterServer struct {
}

func (*UnimplementedFwdGreeterServer) FwdHello(ctx context.Context, req *FwdHelloReq) (*FwdHelloResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FwdHello not implemented")
}

func RegisterFwdGreeterServer(s *grpc.Server, srv FwdGreeterServer) {
	s.RegisterService(&_FwdGreeter_serviceDesc, srv)
}

func _FwdGreeter_FwdHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FwdHelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FwdGreeterServer).FwdHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.FwdGreeter/FwdHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FwdGreeterServer).FwdHello(ctx, req.(*FwdHelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _FwdGreeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.FwdGreeter",
	HandlerType: (*FwdGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FwdHello",
			Handler:    _FwdGreeter_FwdHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld.proto",
}
